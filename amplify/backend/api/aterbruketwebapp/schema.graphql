type Advert
  @model @key(fields: [ "id", "version" ])
  @auth(
    rules: [
      { allow: owner },
      { allow: private, operations: [read] },
      { allow: groups, groups: ["administrator"] }
    ])
{
  id: ID!
  title: String!
  description: String
  location: String
  height: String
  width: String
  length: String
  status: ItemStatus @auth(rules: [{ allow: owner }, { allow: private, operations: [read, update]  }, { allow: groups, groups: ["administrator"] }])
  category: ItemCategory
  material: [ItemAMaterial]
  condition: ItemCondition
  color: String
  areaOfUse: [ItemAreaOfUse]
  images: [ItemImages]
  quantity: Int
  department: String
  instructions: String
  contactPerson: String
  email: String
  phoneNumber: String
  giver: String
  version: Int! @auth(rules: [{ allow: owner }, { allow: private, operations: [read, update]  }, { allow: groups, groups: ["administrator"] }])
  climateImpact: Int
  reservedBySub: String @auth(rules: [{ allow: owner }, { allow: private, operations: [read, update]  }, { allow: groups, groups: ["administrator"] }])
  reservedByName: String @auth(rules: [{ allow: owner }, { allow: private, operations: [read, update]  }, { allow: groups, groups: ["administrator"] }])
  revisions: Int @auth(rules: [{ allow: owner }, { allow: private, operations: [read, update]  }, { allow: groups, groups: ["administrator"] }])
}

enum ItemStatus {
  available
  reserved
  pickedUp
}

enum ItemCategory {
  table
  chair
  desk
  officeChair
  raiseAndLowerableDesk
  other
}

type ItemAMaterial {
  wood: Boolean
  plastic: Boolean
  metal: Boolean
  other: Boolean
}

enum ItemCondition {
  new
  good
  worn
}

type ItemAreaOfUse {
  indoors: Boolean
  outside: Boolean
}

type ItemImages {
  src: String
  alt: String
}
